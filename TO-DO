Completed Items

1.     Remove UI-related references in Settings::prepareListeners()::...::run().
2.     Replace the (final) iterations variable in Settings::prepareListeners()::...::run().
3.     Exit menus.
4.     Logging class. See Database::writeLog().
5.     Decide if the State class requires cryptographic data.
       Duplicates Cryptography. Removed methods from State.
6.     Prepare for Chat, E-Mail, etc. public key pairs.
7.     Enable Settings widgets after an initial password is accepted.
8.     Display neighbors contents.
9.     Display information pertaining to the owner's public keys.
10.    Determine gradle's version in the make files.
11.    Spinner objects in the neighbors table bleed. The table will expand
       as necessary.
12.    Neighbors periodic refresh.
13.    Retrieve/store user name.
14.    Introduce termination logic on critical TCP read/write errors.
15.    Wrap neighbor text.
16.    Synchronized methods or containers? Both.
17.    Neighbor class.
18.    UDP sockets.
19.    UDP multicast.
20.    Display remote server's certificate information. Public key fingerprint.
21.    Neighbor details should be optional.
22.    Database method for retrieving neighbor OIDs.
23.    Outbound database table.
24.    Reset spinners after credentials are initialized.
25.    Reset option. Remove smoke.db. Reset widget states.
26.    Inbound database table.
27.    SipHash (https://en.wikipedia.org/wiki/SipHash).
28.    ECDSA.
29.    Reset option in Authenticate activity.
30.    Connection status text colors.
31.    Dynamic textview objects trim text. Append an extra new line.
32.    EPKS.
33.    If a SipHash ID is deleted, its corresponding participants
       entry should also be removed. Foreign key constraints.
34.    Deleting a neighbor does not cause an immediate disconnect.
35.    Replace Date object with AtomicLong objects.
36.    Copying of read-only values.
37.    Potential database locking problem with repeated replacement
       of neighbor objects. Replaced replace() with intelligent
       insert().
38.    Verify hexadecimal characters of SipHash identities.
39.    Local congestion control.
40.    SQLite secure delete (onConfigure()).
41.    Sort table contents.
42.    Change case of final-static objects in Neighbor, Settings, SipHash,
       TcpNeighbor classes.
43.    Kernel.
44.    Smoke echo? Expensive. Optional.
45.    Display count of queued echo packets per neighbor.
46.    Notify the Chat activity of new participants.
47.    Asynchronous database writes.
48.    Refresh context menu on Chat table.
49.    Retain Chat participant states on refresh.
50.    Detect removal of participants.
51.    Display destination's name during session initialization.
52.    Complete Cryptography.pkiEncrypt().
53.    The initial call (1/2-1/2) should store the generated stream in a
       map (or hash).
       Upon receiving a timely response, the total key stream should be
       saved to smoke.db. If a timely response is not received, the partial data
       should be purged.
54.    Java serialization requires safety.
       (http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8)
55.    Inadvertent calling may sever an established session.
       Do not save a key stream unless a response is received.
       As the half-response does not produce a response, the automatic
       response's result is ignored.
56.    Organic half-and-half: resolve collisions. As Smoke is not ordered,
       order is impossible to predict.
57.    Chat activity state is not retained. States of selected items
       will not be retained as such states are expensive.
       The Bundle object is not saved.
58.    Compare provided encryption and signature public keys.
59.    Inspect destination tags.
60.    The Socket class supports the Proxy class.
       Modify Settings so that TCP neighbors support SOCKS proxies.
61.    Disable proxy fields for non-TCP.
62.    Depict Android version in About. New About.java file too.
63.    Deleting a connected neighbor and quickly re-adding it
       is problematic. If the current thread has been interrupted,
       exit run().
64.    Retain first-contact server certificate. Inspect stored
       bytes with received bytes.
65.    Retain Chat widget selection states. Remove State objects
       if participants are removed via the Settings activity.
66.    Optimize loops.
67.    Display date and time of sent message.
68.    Compress IPv6 Scope ID field when hidden.
69.    Allow resetting of Chat session keys via context menu.
70.    Dynamic DNS for home servers. Functional.
71.    Custom key streams via context menus.
       Generate and separate.
72.    Include network information in neighbors pertaining to
       errors.
73.    Application icon.
74.    Messages must be temporarily retained if the Chat activity
       loses focus.
75.    HTTP proxy.
76.    Validate the SipHash implementation. Please see SipHash::test1().
77.    Connect the state of the Call button to the number of selected
       participants (Chat).
78.    Capitalize SipHash input.
79.    Display exchange status in the Participants table. Icons.
80.    Less populateParticipants() in the Chat activity.
81.    Next (Tab) order; Settings.
82.    Detect removal of neighbors.
83.    Simple binary status in Chat. Kernel scheduler.
84.    Non-exclusive database transactions.
85.    Zero ports are valid. If a system which is allowing
       connections on port zero, Smoke will be able to connect to it.
86.    SipHash description bubble.
87.    EPKS description bubble.
88.    A release target for the make files.
89.    Broadcast a reminder to the Settings activity if a Chat message
       has been received while the Settings activity is active.
90.    Bind recipient and sender.
91.    Optional per-participant signatures.
92.    Messages may arrive while the Settings activity is the primary
       activity. Calls are not logged.
93.    Improve PBKDF2 uses. Initially, generate a temporary stream of
       20 bytes (SHA-1). Afterwards, generate a stream using the
       temporary stream as password material. The length of the second
       stream varies per application.
94.    New date format: YYYY-MM-DD. ISO 8601.
95.    Describe the Ozone feature.
96.    Expand messages to multiples of 8 KiB.
97.    Display message-retrieval action.
98.    Prompt for neighbor removal.
99.    Connecting status until in/out data has been received/transmitted.
100.   Key-sharing messages should be written to smoke.db.

Future Items

1.     Mumble. ("AES/CTS/PKCS7Padding")
2.     (130 / 16 + 1) * 16 + 8 <= 154.
3.     Themes, of course.
4.     Replace INTEGER_BYTES with Integer.BYTES and LONG_BYTES with
       Long.BYTES.
5.     Remote storage of messages.
6.     Allow log clearing. New Log activity?
7.     Resolve DNS through a proxy if a proxy is defined.
8.     SCTP (http://www.oracle.com/technetwork/articles/javase/index-139946.html).
9.     Bluetooth (http://www.oracle.com/technetwork/articles/javame/index-156193.html).
10.    Automatic SipHash hyphens.
11.    Names or PINs alongside SipHashes. The extra bits will increase
       the possibilities.
12.    Protocol-less snubbing without key revocation.

Ignored / Impossible Items

1.     Android exit.
2.     Create a BroadcastReceiver and notify all other activities on exit.
3.     Scroll bars on Spinner objects.
4.     Detect removal of smoke.db.
5.     Participant import. Superseded by EPKS.
6.     Virtual keyboard.
7.     Periodic data transfers may raise Android warnings.
       User is responsible for data limits.
8.     Validate neighbor IP address. User is responsible.
9.     Disable echo on low memory. Notify the user, although memory
       will be required.
10.    Select All context menu in the Chat activity.
11.    Per request, include the source in the application bundle.
12.    XMPP.
13.    Face authentication.
14.    Source-level string translations.
15.    Socket channels. A lot of work.
16.    Optional SipHash identities in received messages. Unique people.
17.    It may be possible to replace m_neighborsScheduler.

Remaining Items

1.     pull-database for multiple devices.
2.     Sign release.
3.     Disable Chat:Send if there is at least one selected participant
       without a session.
4.     Introduce real-time participant typing status.
